1. inconsistencies: In the third file every line is missing depth 0.1 and 0.3 also has data from 2010. 

DB: Good.

2.
	a. Find:; replace:\t							DB: Good.
	b.? Find:(\d)\t{4}  replace:$1NaN 				DB: I'd recommend: Find - \t\t, Replace \tNaN\t
	c. Find:\s$,\t$ replace: empty field			DB: Good, but you might want to account for multiple spaces or tabs \s+$ (\s should match both).
	d. Find:(\w+)\s(\w+) Replace: $1_$2				DB: Good! You could also just search a space " " and replace with an underscore "_".
	e. Find:??? Find:^NaN Replace: empty field		DB: Right track, but most lines will have multiple NaNs. Could look for something like "(NaN\t*)+".
	f. Find:(\d+\.)(\d{1})\d+ replace:$1$2			DB: Good! A more compact version could be (\d+\.\d)\d+ --> $1

3. grep MH_Time Strdln_Twater_090611-090828_corrd.csv >> 2009Samples.csv then, grep 2009 Strdln_Twater_090611-090828_corrd.csv >> 2009Samples.csv for all files

DB: Right track, but what if 2009 is present in other fields in the file?

4.In terminal grep _2009 Strdln_Twater_09(08 and 06)29-091012_corrd.csv >> completeLakeTemps.txt Didn't do 3rd file because has empty feild in everyline

DB: How would looking for "_2009" make sure you have complete lines? 

5. Find: (2009\-\d+\-)(01|15) Replace:$1$2D then, grep 15D and 1D completeLakeTemps.txt >> SemiMonthlyLakeTemps.txt then, find: (2009\-\d+\-)(01|15)D replace:$1$2

DB: Creative idea! I like it. But could you just use the original pattern to grep those lines directly?

6. grep 20:, grep 21: SemiMonthlyLakeTemps.txt >> NightTimeLakeTemps.txt
repeated for each time.

DB: Good idea, but maybe a bit labor intensive. Can you think of a single line that would capture all relevant times at once?

7. Find: (\d{4}\-\d{2}\-\d{2}_\d{2}:\d{2}_\d{3}\.\d_)(\d{2}\.\d{1}).* Replace: $2 then, file save as depth_0.1m.txt. 

DB: Good! You could also keep the dates and times with these values.